<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_water</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CONDICIONES INICIALES.

A = 124;        // Discretización.
a = W/A;        // Tramo.

var i,R1,R2,R3,R4,R5;

R1 = 2*irandom_range(5,10);
R2 = 2*irandom_range(5,10);
R3 = 2*irandom_range(5,10);
R4 = 2*irandom_range(5,10);
R5 = 2*irandom_range(5,10);

for (i=1; i&lt;=A; i++)
    {
    wave[i,0] = -5;
    wave[i,1] = 0;
    wave[i,0] += 5*sin(R1*i*pi/A);
    wave[i,0] += 5*sin(R2*i*pi/A);
    wave[i,0] += 7*abs(cos(R3*i*pi/A));
    wave[i,1] += 5*sin(R4*i*pi/A);
    wave[i,1] += 5*cos(R5*i*pi/A);
    }

wave[00,0] = wave[A,0];
wave[00,1] = wave[A,1];
wave[A+1,0] = wave[1,0];
wave[A+1,1] = wave[1,1];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DETENER CAMBIO DE MAREA.

vpseed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SIMULACIÓN.

if (PAUSED) {exit}

var i;

repeat (2)                          // Velocidad de propagación.
    {
    for (i=1; i&lt;=A; i++)
        {
        // wave[i,1] *= 0.9995;     // Amortiguación.
        wave[i,1] += wave[i+1,0];   // Tensión derecha.
        wave[i,1] += wave[i-1,0];   // Tensoón izquierda.
        wave[i,1] -= 2*wave[i,0];   // Peso propio.
        }
    wave[000,1] = wave[A,1];        // Periodo derecha.
    wave[A+1,1] = wave[1,1];        // Periodo izquierda.
    
    for (i=1;i&lt;=A;i+=1)
        {
        wave[i,0] += wave[i,1]/77;  // Onda superficial.
        }
    wave[000,0] = wave[A,0];        // Periodo derecha.
    wave[A+1,0] = wave[1,0];        // Periodo izquierda.
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DIBUJAR.

var i;

draw_set_color(c_bla);
draw_primitive_begin_texture(pr_trianglestrip,sprite_get_texture(spr_water,0));

for (i=0; i&lt;=A+1;i+=1)
   {   
   draw_vertex_texture(i*a,H,0,1);
   draw_vertex_texture(i*a,y+wave[i,0],0,0);
   i += 1;
   draw_vertex_texture(i*a,H,1,1);
   draw_vertex_texture(i*a,y+wave[i,0],1,0);
   }

draw_primitive_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
